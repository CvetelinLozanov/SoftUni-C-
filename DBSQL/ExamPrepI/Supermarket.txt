CREATE DATABASE Supermarket

USE Supermarket

CREATE TABLE Categories
(
	Id INT PRIMARY KEY IDENTITY,
	[Name] NVARCHAR(30) NOT NULL,
)

CREATE TABLE Items
(
	Id INT PRIMARY KEY IDENTITY,
	[Name] NVARCHAR(30) NOT NULL,
	Price DECIMAL(15,2) NOT NULL,
	CategoryId INT FOREIGN KEY REFERENCES Categories(Id) NOT NULL 
) 

CREATE TABLE Employees
(
	Id INT PRIMARY KEY IDENTITY,
	FirstName NVARCHAR(50) NOT NULL,
	LastName NVARCHAR(50) NOT NULL,
	Phone CHAR(12) NOT NULL,
	Salary DECIMAL(15,2) NOT NULL, 
)

CREATE TABLE Orders
(
	Id INT PRIMARY KEY IDENTITY,
	[DateTime] DATETIME NOT NULL,
	EmployeeId INT FOREIGN KEY REFERENCES Employees(Id) NOT NULL
)

CREATE TABLE OrderItems
(
	OrderId INT FOREIGN KEY REFERENCES Orders(Id) NOT NULL,
	ItemId INT FOREIGN KEY REFERENCES Items(Id) NOT NULL,
	Quantity INT CHECK(Quantity >= 1) NOT NULL

	PRIMARY KEY(OrderId, ItemId)
)

CREATE TABLE Shifts
(
	Id INT IDENTITY NOT NULL,
	EmployeeId INT FOREIGN KEY REFERENCES Employees(Id) NOT NULL,
	CheckIn DATETIME NOT NULL,
	CheckOut DATETIME NOT NULL

	PRIMARY KEY(Id, EmployeeId)
)

ALTER TABLE Shifts
ADD CONSTRAINT CH_CheckInCheckOut CHECK(CheckIn < CheckOut)

--Employees
--Stoyan	Petrov	888-785-8573	500.25
--Stamat	Nikolov	789-613-1122	999995.25
--Evgeni	Petkov	645-369-9517	1234.51
--Krasimir	Vidolov	321-471-9982	50.25

--Items
--Tesla battery	154.25	8
--Chess	30.25	8
--Juice	5.32	1
--Glasses	10	8
--Bottle of water	1	1

INSERT INTO Employees(FirstName, LastName, Phone, Salary)
VALUES('Stoyan', 'Petrov', '888-785-8573', 500.25),
		('Stamat', 'Nikolov', '789-613-1122', 999995.25),
		('Evgeni', 'Petkov', '645-369-9517', 1234.51),
		('Krasimir', 'Vidolov', '321-471-9982',	50.25)

INSERT INTO Items([Name], Price, CategoryId) VALUES
('Tesla battery', 154.25, 8),
('Chess', 30.25, 8),
('Juice', 5.32,	1),
('Glasses',	10,	8),
('Bottle of water',	1, 1)

UPDATE Items
SET Price *= 1.27
WHERE CategoryId IN (1, 2, 3)

DELETE FROM OrderItems
WHERE OrderId = 48

DELETE FROM Orders
WHERE Id = 48

SELECT Id, FirstName
	FROM Employees 
	WHERE Salary > 6500
ORDER BY FirstName, Id

SELECT e.FirstName + ' ' + e.LastName AS FullName,
		e.Phone
	FROM Employees AS e
WHERE Phone LIKE '3%'
ORDER BY e.FirstName, e.Phone

SELECT e.FirstName, e.LastName, COUNT(o.Id) AS [Count]
 FROM Employees AS e
 JOIN Orders AS o ON o.EmployeeId = e.Id
GROUP BY e.FirstName, e.LastName
ORDER BY [Count] DESC, e.FirstName

SELECT e.FirstName, e.LastName, AVG(DATEDIFF(HOUR, s.CheckIn, s.CheckOut)) AS WorkHours
 FROM Employees AS e
 JOIN Shifts AS s ON e.Id = s.EmployeeId
GROUP BY e.Id, e.FirstName, e.LastName
HAVING  AVG(DATEDIFF(HOUR, s.CheckIn, s.CheckOut)) > 7
ORDER BY WorkHours DESC, e.Id

SELECT TOP 1 oi.OrderId, SUM(i.Price * oi.Quantity) AS TotalPrice
 FROM OrderItems AS oi
 JOIN Items AS i ON oi.ItemId = i.Id
GROUP BY oi.OrderId
ORDER BY TotalPrice DESC

SELECT TOP(10) o.Id,
		MAX(i.Price) AS ExpensivePrice, 
		MIN(i.Price) AS CheapPrice
 FROM Orders AS o 
 JOIN OrderItems AS oi ON o.Id = oi.OrderId
 JOIN Items AS i ON i.Id = oi.ItemId
GROUP BY o.Id
ORDER BY ExpensivePrice DESC, o.Id

SELECT DISTINCT e.Id, e.FirstName, e.LastName
 FROM Orders AS o
 JOIN Employees AS e ON o.EmployeeId = e.Id
ORDER BY e.Id

SELECT DISTINCT e.Id,
		e.FirstName + ' ' + e.LastName AS [FullName]		
 FROM Employees AS e
 JOIN Shifts AS s ON s.EmployeeId = e.Id
WHERE DATEDIFF(HOUR, s.CheckIn, s.CheckOut) < 4
ORDER BY e.Id

SELECT TOP(10 )e.FirstName + ' ' + e.LastName AS [FullName],
		SUM(i.Price * oi.Quantity) AS TotalSum,
		SUM(oi.Quantity) AS [Count]
 FROM Employees AS e
 JOIN Orders AS o ON o.EmployeeId = e.Id
 JOIN OrderItems AS oi ON oi.OrderId = o.Id
 JOIN Items AS i ON i.Id = oi.ItemId
WHERE o.[DateTime] < '2018-06-15'
GROUP BY e.FirstName, e.LastName
ORDER BY TotalSum DESC, [Count] DESC

SELECT e.FirstName + ' ' + e.LastName,
		DATENAME(WEEKDAY, s.CheckIn)
	FROM Employees AS e
LEFT JOIN Orders AS o ON o.EmployeeId = e.Id
	JOIN Shifts AS s ON e.Id = s.EmployeeId
	WHERE o.EmployeeId IS NULL AND DATEDIFF(HOUR, s.CheckIn, s.CheckOut) > 12
ORDER BY e.Id

SELECT k.FullName,
	DATEDIFF(HOUR, s.CheckIn, s.Checkout) AS WorkHours,
	k.TotalSum
FROM (
  SELECT o.Id AS OrderId,
		e.Id AS EmployeeId,
		o.Datetime,
		e.FirstName + ' ' + e.LastName AS [FullName],
		SUM(oi.Quantity * i.Price) AS TotalSum,
		ROW_NUMBER() OVER (PARTITION BY e.Id ORDER BY SUM(oi.Quantity * i.Price) DESC) AS RowNumber
      FROM Employees AS e
      JOIN Orders AS o ON e.Id = o.EmployeeId
      JOIN OrderItems AS oi ON o.Id = oi.OrderId
      JOIN Items AS i ON i.Id = oi.ItemId
GROUP BY o.Id,e.FirstName, e.LastName, e.Id, o.DateTime) AS k
	  JOIN Shifts AS s ON s.EmployeeId = k.EmployeeId
WHERE k.RowNumber = 1 AND k.DateTime BETWEEN s.CheckIn AND s.CheckOut
ORDER BY k.FullName, WorkHours DESC, k.TotalSum DESC

SELECT DATEPART(DAY, o.[DateTime]) AS [DayOfMonth],
		FORMAT(AVG(oi.Quantity * i.Price), 'N2') AS AveragePrice
	FROM Orders AS o
	JOIN OrderItems AS oi ON oi.OrderId = o.Id
	JOIN Items AS i ON i.Id = oi.ItemId
GROUP BY DATEPART(DAY, o.[DateTime])
ORDER BY [DayOfMonth]

SELECT i.[Name] AS [Item],
		c.[Name] AS [Category], 
		SUM(oi.Quantity) AS [Count],
		SUM(oi.Quantity * i.Price) AS [TotalPrice]
	 FROM Items AS i
	 JOIN Categories AS c ON c.Id = i.CategoryId
LEFT JOIN OrderItems AS oi ON i.Id = oi.ItemId
GROUP BY i.[Name], c.[Name]
ORDER BY TotalPrice DESC, [Count] DESC

GO
CREATE FUNCTION udf_GetPromotedProducts(@CurrentDate DATETIME, @StartDate DATETIME, @EndDate DATETIME, @Discount DECIMAL(15,2), @FirstItemId INT, @SecondItemId INT, @ThirdItemId INT)
RETURNS VARCHAR(MAX)
BEGIN 
	DECLARE @FirstItemName VARCHAR(50) = (SELECT [Name] FROM Items WHERE Id = @FirstItemId)
	DECLARE @SecondItemName VARCHAR(50) = (SELECT [Name] FROM Items WHERE Id = @SecondItemId)
	DECLARE @ThirdItemName VARCHAR(50) = (SELECT [Name] FROM Items WHERE Id = @ThirdItemId)
	
	IF(@FirstItemName IS NULL OR @SecondItemName IS NULL OR @ThirdItemName IS NULL)
	BEGIN
		RETURN 'One of the items does not exists!'
	END

	IF(@CurrentDate NOT BETWEEN @StartDate AND @EndDate)
	BEGIN
		RETURN 'The current date is not within the promotion dates!'
	END

	DECLARE @firstItemPrice DECIMAL(15, 2) = (SELECT Price FROM Items WHERE Id = @FirstItemId)
	DECLARE @secondItemPrice DECIMAL(15, 2) = (SELECT Price FROM Items WHERE Id = @SecondItemId)
	DECLARE @thirdItemPrice DECIMAL(15, 2) = (SELECT Price FROM Items WHERE Id = @ThirdItemId)

	SET @firstItemPrice = @firstItemPrice - (@firstItemPrice * (@Discount / 100))
	SET @secondItemPrice = @secondItemPrice - (@secondItemPrice * (@Discount / 100))
	SET @thirdItemPrice =  @thirdItemPrice - (@thirdItemPrice * (@Discount / 100))

	RETURN @FirstItemName + ' price: ' + CAST(@FirstItemPrice AS VARCHAR(10)) + ' <-> ' 
	+ @secondItemName + ' price: ' + CAST(@SecondItemPrice AS VARCHAR(10)) + ' <-> ' +
	@thirdItemName + ' price: ' + CAST(@ThirdItemPrice AS VARCHAR(10))
END
GO

SELECT dbo.udf_GetPromotedProducts('2018-08-02', '2018-08-01', '2018-08-03',13, 3,4,5)
SELECT dbo.udf_GetPromotedProducts('2018-08-01', '2018-08-02', '2018-08-03',13,3 ,4,5)

GO
CREATE PROC usp_CancelOrder(@OrderId INT, @CancelDate DATETIME)
AS
	DECLARE @targetOrder INT = (SELECT Id FROM Orders WHERE Id = @OrderId)

	IF(@targetOrder IS NULL)
	BEGIN 
		RAISERROR('The order does not exist!', 16, 1)
		RETURN
	END

	DECLARE @orderDate DATETIME = (SELECT [DateTime] FROM Orders WHERE Id = @OrderId)

	IF(DATEDIFF(DAY, @orderDate, @CancelDate) > 3)
	BEGIN
		RAISERROR('You cannot cancel the order!', 16, 2)
		RETURN
	END

	DELETE FROM OrderItems
	WHERE OrderId = @OrderId

	DELETE FROM Orders
	WHERE Id = @OrderId
GO

CREATE TABLE DeleteOrders
(
OrderId INT,
ItemId INT, 
ItemQuantity INT
)

GO
CREATE TRIGGER tr_DeletedOrders ON OrderItems FOR DELETE
AS
INSERT INTO DeleteOrders (ItemId ,OrderId, ItemQuantity)
SELECT ItemId, OrderId, Quantity FROM deleted
GO

DELETE FROM OrderItems
WHERE OrderId = 5

DELETE FROM Orders
WHERE Id = 5 


