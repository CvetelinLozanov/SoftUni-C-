--01
CREATE TABLE Logs(
	LogId INT PRIMARY KEY IDENTITY,
	AccountId INT FOREIGN KEY REFERENCES Accounts(Id),
	OldSum DECIMAl(15,2),
	NewSum DECIMAL(15,2)
)

GO
CREATE TRIGGER tr_InsertAccountInfo ON Accounts FOR UPDATE
AS

DECLARE @newSum DECIMAL(15, 2) = (SELECT Balance FROM inserted)
DECLARE @oldSum DECIMAL(15, 2) = (SELECT Balance FROM deleted)
DECLARE @accountId INT = (SELECT Id FROM inserted)

INSERT INTO Logs (AccountId, NewSum, OldSum)
VALUES(@accountId, @newSum, @oldSum)

UPDATE Accounts
SET Balance += 10
WHERE Id = 1

SELECT *
	FROM Accounts WHERE Id = 1

SELECT *
	FROM Logs
GO
--02
CREATE TABLE NotificationEmails(
ID INT PRIMARY KEY IDENTITY,
Recipient INT FOREIGN KEY REFERENCES Accounts(Id),
[Subject] VARCHAR(50),
Body VARCHAR(MAX)
)

GO
CREATE TRIGGER tr_LogEmail ON Logs FOR INSERT
AS

 DECLARE @accountId INT = (SELECT TOP (1) AccountId FROM inserted)
 DECLARE @oldSum DECIMAl(15,2) = (SELECT TOP(1) OldSum FROM inserted)
 DECLARE @newSum DECIMAL(15,2) = (SELECT TOP(1) NewSum FROM inserted)

 INSERT INTO NotificationEmails(Recipient, [Subject], Body)
 VALUES(
	@accountId,
	'Balance change for account: ' + CAST(@accountId AS VARCHAR(20)),
	'On ' + CONVERT(VARCHAR(30), GETDATE(), 103) + ' your balance was changed from ' + CAST(@oldSum AS VARCHAR(20)) + ' to ' + CAST(@newSum AS VARCHAR(20))
 )
GO

UPDATE Accounts
SET Balance += 199
WHERE Id = 1

SELECT *
	FROM NotificationEmails
--03
CREATE PROC usp_DepositMoney @accountId INT, @moneyAmount DECIMAL(15,2)
AS
BEGIN TRANSACTION
DECLARE @account INT = (SELECT Id FROM Accounts WHERE Id = @accountId)

IF(@account IS NULL)
BEGIN
	ROLLBACK
	RAISERROR('Invalid account id!', 16, 1)
	RETURN
END

IF(@moneyAmount < 0)
BEGIN
	ROLLBACK
	RAISERROR('Negative amount!', 16, 1)
	RETURN
END

UPDATE Accounts
SET Balance += @moneyAmount
WHERE Id = @accountId
COMMIT

EXEC usp_DepositMoney 1, 118.88

SELECT *
	FROM Accounts 
	WHERE Id = 1
--04
ALTER PROC usp_WithdrawMoney @accountId INT, @moneyAmount DECIMAL(15,2)
AS
BEGIN TRANSACTION
DECLARE @account INT = (SELECT Id FROM Accounts WHERE Id = @accountId)
DECLARE @accountBalance DECIMAL(15, 4) = (SELECT Balance FROM Accounts WHERE Id = @accountId)

IF(@account IS NULL)
BEGIN
	ROLLBACK
	RAISERROR('Invalid account id!', 16, 1)
	RETURN
END

IF(@moneyAmount < 0)
BEGIN
	ROLLBACK
	RAISERROR('Negative amount!', 16, 1)
	RETURN
END

IF(@accountBalance - @moneyAmount < 0)
BEGIN
	ROLLBACK
	RAISERROR('Insufficent amount!', 16, 1)
	RETURN
END

UPDATE Accounts
SET Balance -= @moneyAmount
WHERE Id = @accountId
COMMIT

--05
CREATE PROC usp_TransferMoney(@SenderId INT, @ReceiverId INT, @Amount DECIMAL(15, 4))
AS
BEGIN TRANSACTION
 EXEC usp_WithdrawMoney @SenderId, @amount
 EXEC usp_DepositMoney @ReceiverId, @amount
COMMIT

SELECT * FROM Accounts WHERE Id = 1 OR Id = 2

EXEC usp_TransferMoney 1, 2, 193
--06
USE Diablo

SELECT *
 FROM Users AS u 
 JOIN UsersGames AS ug ON ug.UserId = u.Id
 WHERE ug.Id = 38

SELECT *
	FROM Items
WHERE MinLevel < 20

SELECT *
	FROM UserGameItems
WHERE UserGameId = 38 AND ItemId = 14

INSERT INTO UserGameItems(UserGameId, ItemId)
VALUES(38, 14)

 CREATE TRIGGER tr_RestrictItems ON UserGameItems INSTEAD OF INSERT
 AS
 DECLARE @itemId INT = (SELECT itemId FROM inserted)
 DECLARE @userGameId INT = (SELECT UserGameId FROM inserted)

 DECLARE @itemLevel INT =(SELECT MinLevel FROM Items WHERE Id = @itemId)
 DECLARE @userGameLevel INT =(SELECT [Level] FROM UsersGames WHERE Id = @userGameId)

 IF(@userGameLevel >= @itemLevel)
 BEGIN
	INSERT INTO UserGameItems(ItemId, UserGameId) 
	VALUES(@itemId, @userGameId)

 END

SELECT *
	FROM Users AS u
	JOIN UsersGames AS ug ON u.Id = ug.UserId
	JOIN Games AS g ON g.Id = ug.GameId
WHERE g.Name = 'Bali' AND u.Username IN ('baleremuda', 'loosenoise', 'inguinalself', 'buildingdeltoid', 'monoxidecos')


UPDATE UsersGames 
SET Cash += 50000
WHERE GameId = (SELECT Id FROM Games WHERE Name = 'Bali') AND
		UserId IN (SELECT Id FROM Users WHERE Username IN ('baleremuda', 'loosenoise', 'inguinalself', 'buildingdeltoid', 'monoxidecos'))
GO
CREATE PROC usp_BuyItem @UserId INT, @ItemId INT, @GameId INT
AS 
BEGIN TRANSACTION
DECLARE @user INT= (SELECT Id FROM Users WHERE Id = @UserId)
DECLARE @item INT= (SELECT Id FROM Items WHERE Id = @ItemId)

IF(@user IS NULL OR @item IS NULL)
BEGIN 
	ROLLBACK
	RAISERROR('Invalid user or item id!', 16, 1)
	RETURN
END

DECLARE @UserCash DECIMAL(15,2) =(SELECT Cash FROM UsersGames WHERE UserId = @UserId AND GameId = @GameId)
DECLARE @ItemPrice DECIMAL(15, 2) =  (SELECT Price FROM Items WHERE Id = @ItemId)

IF(@UserCash - @ItemPrice  < 0)
BEGIN 
	ROLLBACK
	RAISERROR('Insufficient funds', 16, 1)
	RETURN
END

UPDATE UsersGames
SET Cash -= @ItemPrice
WHERE UserId = @UserId AND GameId = @GameId

DECLARE @UserGameId DECIMAL(15,2) =(SELECT Id FROM UsersGames WHERE UserId = @UserId AND GameId = @GameId)

INSERT INTO UserGameItems(ItemId, UserGameId)
VALUES(@ItemId, @GameId)

COMMIT
GO

SELECT * FROM Users WHERE Username IN ('baleremuda', 'loosenoise', 'inguinalself', 'buildingdeltoid', 'monoxidecos')

DECLARE @itemId INT = 251
WHILE (@itemId <= 290)
BEGIN
	EXEC usp_BuyItem 22, @itemId, 212
	EXEC usp_BuyItem 37, @itemId, 212
	EXEC usp_BuyItem 52, @itemId, 212
	EXEC usp_BuyItem 62, @itemId, 212
	SET @itemId += 1 
END

SELECT * FROM UsersGames WHERE GameId = 212

DECLARE @coutner INT = 501
WHILE (@coutner <= 539)
BEGIN
	EXEC usp_BuyItem 22, @coutner, 212
	EXEC usp_BuyItem 37, @coutner, 212
	EXEC usp_BuyItem 52, @coutner, 212
	EXEC usp_BuyItem 62, @coutner, 212
	SET @coutner += 1 
END

SELECT u.Username, g.Name, ug.Cash, i.Name
 FROM Users AS u
 JOIN UsersGames AS ug ON ug.UserId = u.Id
 JOIN Games AS g ON g.Id = ug.GameId
 JOIN UserGameItems AS ugi ON ugi.UserGameId = ug.Id
 JOIN Items AS i ON ugi.ItemId = i.Id
 WHERE g.Name = 'Bali'
ORDER BY u.Username, i.Name

--07
--StamatId 9
-- Sunflower Id 87
EXEC usp_BuyItem 9, 0, 87


SELECT Id
	FROM Items 
WHERE (MinLevel BETWEEN 11 AND 12) OR (MinLevel BETWEEN 19 AND 21)
--08
USE SoftUni
CREATE PROC usp_AssignProject(@employeeId INT, @projectId INT)
AS
BEGIN TRANSACTION
DECLARE @employee INT = (SELECT EmployeeId FROM Employees WHERE EmployeeID = @employeeId)
DECLARE @project INT = (SELECT ProjectId FROM Projects WHERE ProjectID = @projectId)

IF (@employee IS NULL OR @project IS NULL)
BEGIN
	ROLLBACK
	RAISERROR('Invalid employee id or project id', 16, 1)
	RETURN
END

DECLARE @employeeProjects INT = (SELECT COUNT(*) FROM EmployeesProjects WHERE
EmployeeID = @employeeId)

IF (@employeeProjects >= 3)
BEGIN 
	ROLLBACK
	RAISERROR('The employee has too many projects!', 16, 1)
	RETURN
END

INSERT INTO EmployeesProjects (EmployeeID, ProjectID) 
VALUES (@employeeId, @projectId)
COMMIT

SELECT *
FROM EmployeesProjects WHERE EmployeeID = 1

EXEC usp_AssignProject 2, 1
--09
CREATE TABLE Deleted_Employees(
	EmployeeId INT PRIMARY KEY,
	FirstName VARCHAR(50),
	LastName VARCHAR(50),
	MiddleName VARCHAR(50),
	JobTitle VARCHAR(50),
	DepartmentId INT,
	Salary DECIMAL(15, 2)
)

GO
CREATE TRIGGER tr_DeleteEmployees ON Employees FOR DELETE
AS
	INSERT INTO Deleted_Employees(EmployeeId, FirstName, LastName, MiddleName, JobTitle, DepartmentId, Salary)
	SELECT EmployeeID, FirstName, LastName, MiddleName, JobTitle, DepartmentID, Salary  FROM deleted
GO
